//==================================================================================//

Task0.py - O(1)
: We are not iterating over the elements of input list, we are only accessing first and last element by and index
  Accessing an item with an index from list has a worst case time complexity, Big O(1)


//=================================================================================//

Task1.py - O(N square)
: There is one for loop in the method getUniqueNumbersFrom which has a time complexity of O(N) as we are iterating over the records of length N
  For each element, we are performing add operation on the set twice each of which has a worst case time complexity of O (N). As we are doing this twice it is O(N + N)
  We are accessing the records to be added in the set by index and thus the time complexity for accessing a record is O (1)
  Hence the function getUniqueNumbersFrom has a time complexity of O(N(N + N)) = O(N square)
  We are calling this function twice and hence the total time complexity = O(N square + N square) which is equal to O (N square) for simplicity.
//=================================================================================//

Task2.py - O(N square)
: In the function getNumberToDurationMap() we are iterating over array calls of length N has a worst case time complexity of O (N)
  Inside this loop we are calling add duration method which checks if there is an entry in the dictionary with a key which has a Worst case time complexity  O (N)
  we are doing this twice inside the loop and hence it is O (N + N) which can be treated as O (N) for simplicity
  thus overall time complexity for function getNumberDurationToMap() is O (N square)
  After this we are iterating over the keys, the dictionary.keys() method creates a list and has time complexity O (N) and iterating over it has O(N)
  Thus, the total is O (N square) + O (N + N)
  For simplicity it is O (N square)

//=================================================================================//

Task3.py - Part A: O(N square) + O(N log N) + O(2N)
           Part B: O(N)
1. Part A
: First we iterate over all call records and thus the time complexity is O(N) where N is the length of the array of call records
  Inside this loop we iterate over the number of length N has runtime O(N), because of the condition we iterate only once and not twice
  So total time complexity for the function is O(N square)
  After that we are using the add function from set which has a time complexity of O (N)
  Converting this list to set cost O (N)
  Later, we use the built in sort function which has time complexity of  O(NlogN)
  Then iterate over this sorted list using a for loop and thus another O (N) is added
  Total time complexity is O(N square) + O(N log N) + O(2N)

2. Part B
:  In function, printPercentageOfCallsMadeFroAndToBangalore() we are only iterating ones over input calls of length N
   So runtime is O(N)

//=================================================================================//

Task4.py - O(5N) + O(N log N) + O(N square)
: We iterate over array of text record of length n and hence the time complexity is O (N)
  Inside this loop we are adding elements in the set which has a time complexity of O (N), we are doing this twice and hence the complexity is O(N + N)
  the total time complexity in the first iteration is O(N square + N square) or O (N square)
  We repeat the same process another time and hence the total time complexity is  O(N square + N square)
  After this, we are using the difference method which has time complexity O(N), we are doing this 3 times and thus it is  O(3N)
  Converting this set to list has a time complexity of O (N)
  Sorting it has O(NlogN)
  Iterating over the sorted list has O(N)
  Thus total time complexity is O(5N) + O(N log N) + O(N square)



